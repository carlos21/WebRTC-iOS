require "pathname"

fastlane_version "2.181.0"
default_platform :ios
xcversion(version: "12.4")
setup_jenkins(derived_data_path: "./DerivedData")

platform :ios do

    before_all do
        # Dotenv.load ".env.ios"
        # ENV["FASTLANE_DONT_STORE_PASSWORD"] = "0"
        ENV["FASTLANE_USER"] = "darkzeratul64@gmail.com"
        # ENV["FASTLANE_PASSWORD"] = "MiPuchuxD21"
        ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = "smlj-zsnt-vosu-fdoq"
        # ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
    end

    after_all do |lane|
      
    end

    lane :deploy_testflight do
        certs_appstore
        build_for_testflight
        upload_testflight
    end

    lane :deploy_firebase do

    end

    lane :signing do
        sync_code_signing #match

        mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
        update_code_signing_settings(
            profile_name: mapping[ENV['MATCH_APP_IDENTIFIER']]
        )
    end

    desc "Fetches the provisioning profiles so you can build locally and deploy to your device"
    lane :certs_dev do
        match(
            app_identifier: "com.landgorilla.webrtcdemo",
            type: "development", 
            force_for_new_devices: true,
            readonly: true
        )
    end

    desc "Fetches the provisioning profiles so you can build for distribution outside the appstore"
    lane :certs_adhoc do
        register_devices(devices_file: "./devices.txt")
        match(
            app_identifier: "com.landgorilla.webrtcdemo",
            type: "adhoc", 
            force_for_new_devices: true
        )
    end

    desc "Fetches the provioning profiles so you can build and deploy to the appstore"
    lane :certs_appstore do
        match(
            app_identifier: "com.landgorilla.webrtcdemo",
            type: "appstore",
            readonly: true
        )
    end

    desc "Builds the app for testflight"
    lane :build_for_testflight do
        gym(
            configuration: "WebRTC UAT",
            workspace: "WebRTCMobileDemo.xcworkspace",
            scheme: "WebRTCMobileDemo",
            silent: true,
            clean: true,
            output_directory: "./build",
            output_name: "WebRTC-testflight.ipa",
            export_method: "app-store"
        )
    end

    desc "Submit a new Beta Build to Apple TestFlight"
    lane :deploy_itunes do
        # puts latest_testflight_build_number(live: true)
        uat()
        upload_testflight()
    end

    desc "Uploads to TestFlight"
    lane :upload_testflight do |options|
        upload_to_testflight(
            ipa: './build/WebRTC-testflight.ipa',
            skip_submission: true
        )
    end

    desc "Uploads to Firebase"
    lane :upload_firebase do |options|
        path = "./WebRTC-testflight.ipa"
        firebase_app_distribution(
            app: "",
            groups: "Testers",
            firebase_cli_path: "/usr/local/bin/firebase",
            ipa_path: path
        )
    end

    lane :set_version do |params|
        version = params[:v]
        increment_build_number
        increment_version_number(version_number: version)
        commit_version_bump(
            message: "Prepare version v#{version} for next release",
            force: true,
            xcodeproj: "WebRTCMobileDemo.xcodeproj"
        )
    end

    lane :increment_build do |params|
        version = get_version_number(target: "WebRTCMobileDemo")
        increment_build_number
        build_number_after_increment = get_build_number
        commit_version_bump(
            message: "New build #{build_number_after_increment} - v#{version}",
            force: true,
            xcodeproj: "WebRTCMobileDemo.xcodeproj"
        )
        push_to_git_remote
    end

    lane :increment_version do |params|
        increment_build_number
        build_number_after_increment = get_build_number
        commit_version_bump(
            message: "Prepare build for next release #{build_number_after_increment}",
            force: true,
            xcodeproj: "WebRTCMobileDemo.xcodeproj"
        )
        push_to_git_remote
    end

    desc "Upload any dsyms in the current directory to Firebase"
    lane :upload_dsyms do |options|
        version_number = get_version_number(target: "WebRTCMobileDemo")
        build_number = get_build_number
        download_dsyms(
            app_identifier: "com.landgorilla.webrtcdemo",
            version: version_number,
            build_number: build_number
        )
        # upload to firebase
    end

    desc "Firebase App Distribution"
    lane :ci_adhoc_build do
        build_config = "adhoc"
        schemes = {
            "WebRTCMobileDemo" => "com.landgorilla.webrtcdemo"
        }
        auto_increment_version(tagPrefix: ReleaseTagPrefix::FIREBASE)
        ci_build(
            schemes: schemes, 
            config: build_config,
            export: "ad-hoc",
            bitcode: "false"
        )
    end

    def on_error(exception)
        send_slack_notification("Something went wrong", false, exception)
    end

    def print_exception(exception)
        puts "#{exception.class}"
        puts exception.backtrace.join("\n")
    end

end



# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer



